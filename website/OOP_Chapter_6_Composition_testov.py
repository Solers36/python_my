"""
Приведенная выше программа имеет ряд недочетов и недоработок. 
Требуется исправить и доработать, согласно следующему плану.

При вычислении оклеиваемой поверхности мы не "портим" поле self.square. 
В нем так и остается полная площадь стен. Ведь она может понадобиться, 
если состав списка wd изменится, и придется заново вычислять оклеиваемую площадь.

Однако в классе не предусмотрено сохранение длин сторон, хотя они тоже могут 
понадобиться. Например, если потребуется изменить одну из величин у уже 
существующего объекта. Площадь же помещения всегда можно вычислить, если хранить 
исходные параметры. Поэтому сохранять саму площадь в поле не обязательно.

Исправьте код так, чтобы у объектов Room были только четыре поля – width, lenght,
 height и wd. Площади (полная и оклеиваемая) должны вычислять лишь при необходимости
  путем вызова методов.

Программа вычисляет площадь под оклейку, но ничего не говорит о том, сколько 
потребуется рулонов обоев. Добавьте метод, который принимает в качестве аргументов
 длину и ширину одного рулона, а возвращает количество необходимых, исходя из 
 оклеиваемой площади.

Разработайте интерфейс программы. Пусть она запрашивает у пользователя данные и 
выдает ему площадь оклеиваемой поверхности и количество необходимых рулонов.
"""

class Win_Door:
     def __init__(self, x, y):
          self.square = x * y


class Room:
    def __init__(self, x, y, z):
        self.square = 2 * z * (x + y)
        self.wd = []
    def addWD(self, w, h):
        self.wd.append(Win_Door(w, h))
    def workSurface(self):
        new_square = self.square
        for i in self.wd:
            new_square -= i.square
        return new_square
 
r1 = Room(6, 3, 2.7) 
print(r1.square) # выведет 48.6
r1.addWD(1, 1) 
r1.addWD(1, 1)
r1.addWD(1, 2)
print(r1.workSurface()) # выведет 44.6